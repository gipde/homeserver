// vim: set filetype=cpp:

#include "Ds18x20libTest.h"
#include <avr/interrupt.h>

extern "C" {
#include "../../main/ds18x20lib.h"
#include "../../main/delay.h"
}

CASE(Ds18x20LibTest, TestBase)

static one_wire_T ow;

static uint16_t cycles;

BEFORECLASS()
{
		/*
	TCCR0 = (1<<CS01);
	TIMSK |= (1<<TOIE0);
	sei();
	*/
}

SETUP()
{
    ow = { M_PORTA, M_PINA, M_DDRA, 4};
    initMock();
	cycles=0;
}

TEST(search_test)
{
    /*
     * es sollen zwei sensoren gefunden werden
     */

    char roms[2][8] = {
        { 0x28, 0x61, 0xB6, 0xCE, 0x01, 0x00, 0x00, 0xBE },
        { 0x28, 0xD7, 0xBD, 0xCE, 0x01, 0x00, 0x00, 0x7B }
    };

    char rdat[] = {
        0x0A, 0x99, 0xA6, 0x5A, 0x5A, 0x96, 0x59, 0x69,
        0xA5, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x5A, 0x95,
        0xA9, 0x66, 0x5A, 0x99, 0x95, 0x55, 0x66, 0xA5,
        0x95, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0x5A, 0x56,
        0x09
    };

    replay_T mreplay = { rdat, 33 };
    set_replay_data(&mreplay);

    sensorT sensor;
    uint8_t romptr = 0;

    while (search_slaves(&ow, &sensor)) {
		debug("cycles %d %d ",cycles,TCNT0);
        debugn("ROM: ");

        for (int i = 0; i < 8; i++) {
            debugc("%02X ", sensor.rom[i]);

            if (*((char*)roms + romptr++) != sensor.rom[i]) {
                debugc(" flase rom byte: %x<>%x", *((char*)roms + romptr++),
                       sensor.rom[i]);
                debugnl();
                return false;
            }
        }

        debugnl();
    }

    char r[] =  {0x7e, 0x94, 0xd4, 0xbe, 0xba, 0xc8, 0x89, 0x45, 0x98, 0x6f, 0x1b, 0xdf, 0x72, 0xf7, 0x59, 0x96, 0xe4, 0x8, 0xa6, 0x48};
    return cmpMock(r);
}

TEST(readTemp)
{
    return true;
}

TEST(readTemp_9Bit)
{
    return true;
}

TEST(crc)
{
    return true;
}

ISR (TIMER0_OVF_vect) 
{
		cycles++;
}
